class Solution {
    public static String infixToPostfix(String s) {
        
        Stack<Character> stack = new Stack<>();
        StringBuilder result = new StringBuilder();
        
        for(int i = 0 ; i < s.length(); i++){
            char ch = s.charAt(i);
            
            // Directly add operands into stack
            if(ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9'){
                result.append(ch);
            }
            // Directly add '(' into stack
            else if(ch == '('){
                stack.push(ch);
            }
            
            // remove all characters from stack till it reaches '('
            else if(ch == ')'){
                while(!stack.isEmpty() && stack.peek() != '('){
                    result.append(stack.pop());
                }
                if(!stack.isEmpty()){
                    stack.pop(); // removes '('
                }
            }
            // check the precedence value of curr character and top of the stack..
            // If prec. value of top of stack >= curr char precedence 
            // add the value of top of stack into result
            else if(ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^'){
                while(!stack.isEmpty() && priority(stack.peek()) >= priority(ch)){
                    result.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        // Add all remaining charcters from stack into result
        while(!stack.isEmpty()){
            result.append(stack.pop());
        }
        return result.toString();
    }
    static int priority(char ch){
        if(ch == '^') return 3;
        else if(ch == '*' || ch == '/') return 2;
        else if(ch == '+' || ch == '-') return 1;
        return 0;
    }
}
